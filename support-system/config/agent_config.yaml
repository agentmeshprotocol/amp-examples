# Agent Configuration for AMP Support System
# This file contains configuration settings for all support agents

# Global Settings
global:
  amp_endpoint: "http://localhost:8000"
  log_level: "INFO"
  max_retries: 3
  timeout_seconds: 30

# Individual Agent Configurations
agents:
  
  # Ticket Classifier Agent (LangChain)
  ticket_classifier:
    agent_id: "ticket-classifier-001"
    agent_name: "Ticket Classifier"
    framework: "langchain"
    
    # LLM Configuration
    llm:
      model: "gpt-4"
      temperature: 0.1
      max_tokens: 1000
      timeout: 30
    
    # Classification Settings
    classification:
      confidence_threshold: 0.7
      sentiment_analysis: true
      urgency_detection: true
      auto_routing: true
    
    # Categories and Keywords
    categories:
      technical:
        keywords: ["error", "bug", "login", "api", "integration", "performance"]
        priority_boost: 0.1
      billing: 
        keywords: ["payment", "invoice", "refund", "subscription", "billing"]
        priority_boost: 0.2
      product:
        keywords: ["feature", "how to", "tutorial", "documentation", "usage"]
        priority_boost: 0.0
    
    # Escalation Rules
    escalation:
      critical_keywords: ["critical", "emergency", "down", "outage"]
      enterprise_boost: 0.2
      sentiment_threshold: -0.5

  # Technical Support Agent (CrewAI)
  technical_support:
    agent_id: "technical-support-001"
    agent_name: "Technical Support Agent"
    framework: "crewai"
    
    # CrewAI Configuration
    crew:
      max_rounds: 10
      speaker_selection: "round_robin"
      verbose: true
    
    # Agent Roles
    agents:
      technical_analyst:
        role: "Technical Analyst"
        backstory: "Expert in system architecture and technical troubleshooting"
        tools: ["diagnostic_tool", "solution_search"]
      
      solution_engineer:
        role: "Solution Engineer"
        backstory: "Specialist in creating step-by-step technical solutions"
        tools: ["solution_search", "knowledge_base"]
      
      escalation_specialist:
        role: "Escalation Specialist"
        backstory: "Expert in determining escalation requirements"
        tools: ["escalation_analysis"]
    
    # Troubleshooting Settings
    troubleshooting:
      max_steps: 10
      include_diagnostics: true
      auto_escalation: true
      complexity_threshold: "high"

  # Billing Support Agent (AutoGen)
  billing_support:
    agent_id: "billing-support-001"
    agent_name: "Billing Support Agent"
    framework: "autogen"
    
    # AutoGen Configuration
    autogen:
      max_rounds: 8
      speaker_selection_method: "round_robin"
      human_input_mode: "NEVER"
    
    # Billing Settings
    billing:
      refund_limit: 1000.00
      approval_threshold: 500.00
      auto_process_limit: 100.00
      currency: "USD"
    
    # Payment Processing
    payments:
      retry_attempts: 3
      retry_delay: 3600  # 1 hour
      notification_delay: 86400  # 24 hours

  # Product Support Agent (LangChain)
  product_support:
    agent_id: "product-support-001"
    agent_name: "Product Support Agent"
    framework: "langchain"
    
    # Product Knowledge
    knowledge:
      update_frequency: "daily"
      confidence_threshold: 0.8
      include_examples: true
      max_suggestions: 5
    
    # Feature Requests
    feature_requests:
      auto_categorize: true
      roadmap_check: true
      feasibility_analysis: true
      priority_matrix: true

  # Escalation Manager Agent (Custom)
  escalation_manager:
    agent_id: "escalation-manager-001"
    agent_name: "Escalation Manager"
    framework: "custom"
    
    # Escalation Matrix
    escalation_matrix:
      critical_enterprise: "director"
      critical_premium: "manager"
      critical_standard: "senior_specialist"
      urgent_enterprise: "manager"
      urgent_premium: "senior_specialist"
      high_enterprise: "senior_specialist"
    
    # SLA Monitoring
    sla_monitoring:
      check_interval: 300  # 5 minutes
      breach_notification: true
      auto_escalation: true
    
    # Contacts
    contacts:
      team_lead:
        technical: "tech-lead@company.com"
        billing: "billing-lead@company.com"
        product: "product-lead@company.com"
      senior_specialist:
        technical: "senior-tech@company.com"
        billing: "senior-billing@company.com"
        product: "senior-product@company.com"
      manager:
        support: "support-manager@company.com"
        customer_success: "cs-manager@company.com"
      director:
        support: "support-director@company.com"

  # Knowledge Base Agent (Custom)
  knowledge_base:
    agent_id: "knowledge-base-001"
    agent_name: "Knowledge Base Agent"
    framework: "custom"
    
    # Search Configuration
    search:
      max_results: 10
      relevance_threshold: 0.6
      include_faqs: true
      include_articles: true
    
    # Content Management
    content:
      auto_update_metrics: true
      track_effectiveness: true
      suggest_improvements: true
    
    # Cache Settings
    cache:
      enabled: true
      ttl: 3600  # 1 hour
      max_size: 1000

# Web Interface Configuration
web:
  host: "0.0.0.0"
  port: 8080
  debug: false
  
  # Session Configuration
  session:
    secret_key: "your-secret-key-here"
    expire_minutes: 1440  # 24 hours
  
  # File Upload
  upload:
    max_size_mb: 10
    allowed_types: [".pdf", ".doc", ".docx", ".txt", ".png", ".jpg", ".jpeg"]
    storage_path: "data/uploads"

# Database Configuration (if using persistent storage)
database:
  # SQLite for development
  url: "sqlite:///data/support_system.db"
  
  # PostgreSQL for production
  # url: "postgresql://user:password@localhost/support_system"
  
  # Connection Settings
  pool_size: 5
  max_overflow: 10
  echo: false

# Monitoring and Metrics
monitoring:
  # Health Check
  health_check:
    enabled: true
    interval: 30
    timeout: 10
  
  # Metrics Collection
  metrics:
    enabled: true
    endpoint: "/metrics"
    include_system: true
    include_agents: true
  
  # Alerting
  alerts:
    email_enabled: false
    slack_enabled: false
    webhook_url: ""

# Security Configuration
security:
  # API Security
  api:
    rate_limit: "100/minute"
    require_auth: false  # Set to true in production
  
  # CORS Settings
  cors:
    allow_origins: ["*"]  # Restrict in production
    allow_methods: ["GET", "POST", "PUT", "DELETE"]
    allow_headers: ["*"]

# Logging Configuration
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # File Logging
  file:
    enabled: true
    path: "logs/support_system.log"
    max_size_mb: 100
    backup_count: 5
    rotate: true
  
  # Console Logging
  console:
    enabled: true
    colored: true
  
  # Agent-specific Logging
  agents:
    level: "INFO"
    separate_files: true
    path_template: "logs/agents/{agent_id}.log"

# Development Settings
development:
  # Mock Data
  mock_data:
    enabled: true
    sample_tickets: 50
    sample_customers: 20
  
  # Debug Features
  debug:
    enable_profiling: false
    log_amp_messages: false
    mock_llm_responses: false